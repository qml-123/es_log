// Code generated by thriftgo (0.2.9). DO NOT EDIT.

package base

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type BaseData struct {
	LogId       string  `thrift:"log_id,1,required" frugal:"1,required,string" json:"log_id"`
	FromService *string `thrift:"from_service,2,optional" frugal:"2,optional,string" json:"from_service,omitempty"`
	ToService   *string `thrift:"to_service,3,optional" frugal:"3,optional,string" json:"to_service,omitempty"`
	ToMethod    *string `thrift:"to_method,4,optional" frugal:"4,optional,string" json:"to_method,omitempty"`
	Locate      *string `thrift:"locate,5,optional" frugal:"5,optional,string" json:"locate,omitempty"`
	Code        int32   `thrift:"code,6,required" frugal:"6,required,i32" json:"code"`
	Message     *string `thrift:"message,7,optional" frugal:"7,optional,string" json:"message,omitempty"`
}

func NewBaseData() *BaseData {
	return &BaseData{}
}

func (p *BaseData) InitDefault() {
	*p = BaseData{}
}

func (p *BaseData) GetLogId() (v string) {
	return p.LogId
}

var BaseData_FromService_DEFAULT string

func (p *BaseData) GetFromService() (v string) {
	if !p.IsSetFromService() {
		return BaseData_FromService_DEFAULT
	}
	return *p.FromService
}

var BaseData_ToService_DEFAULT string

func (p *BaseData) GetToService() (v string) {
	if !p.IsSetToService() {
		return BaseData_ToService_DEFAULT
	}
	return *p.ToService
}

var BaseData_ToMethod_DEFAULT string

func (p *BaseData) GetToMethod() (v string) {
	if !p.IsSetToMethod() {
		return BaseData_ToMethod_DEFAULT
	}
	return *p.ToMethod
}

var BaseData_Locate_DEFAULT string

func (p *BaseData) GetLocate() (v string) {
	if !p.IsSetLocate() {
		return BaseData_Locate_DEFAULT
	}
	return *p.Locate
}

func (p *BaseData) GetCode() (v int32) {
	return p.Code
}

var BaseData_Message_DEFAULT string

func (p *BaseData) GetMessage() (v string) {
	if !p.IsSetMessage() {
		return BaseData_Message_DEFAULT
	}
	return *p.Message
}
func (p *BaseData) SetLogId(val string) {
	p.LogId = val
}
func (p *BaseData) SetFromService(val *string) {
	p.FromService = val
}
func (p *BaseData) SetToService(val *string) {
	p.ToService = val
}
func (p *BaseData) SetToMethod(val *string) {
	p.ToMethod = val
}
func (p *BaseData) SetLocate(val *string) {
	p.Locate = val
}
func (p *BaseData) SetCode(val int32) {
	p.Code = val
}
func (p *BaseData) SetMessage(val *string) {
	p.Message = val
}

var fieldIDToName_BaseData = map[int16]string{
	1: "log_id",
	2: "from_service",
	3: "to_service",
	4: "to_method",
	5: "locate",
	6: "code",
	7: "message",
}

func (p *BaseData) IsSetFromService() bool {
	return p.FromService != nil
}

func (p *BaseData) IsSetToService() bool {
	return p.ToService != nil
}

func (p *BaseData) IsSetToMethod() bool {
	return p.ToMethod != nil
}

func (p *BaseData) IsSetLocate() bool {
	return p.Locate != nil
}

func (p *BaseData) IsSetMessage() bool {
	return p.Message != nil
}

func (p *BaseData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetLogId bool = false
	var issetCode bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetLogId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetCode = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetLogId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCode {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BaseData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BaseData[fieldId]))
}

func (p *BaseData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LogId = v
	}
	return nil
}

func (p *BaseData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FromService = &v
	}
	return nil
}

func (p *BaseData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ToService = &v
	}
	return nil
}

func (p *BaseData) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ToMethod = &v
	}
	return nil
}

func (p *BaseData) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Locate = &v
	}
	return nil
}

func (p *BaseData) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *BaseData) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = &v
	}
	return nil
}

func (p *BaseData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BaseData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BaseData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("log_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LogId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BaseData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFromService() {
		if err = oprot.WriteFieldBegin("from_service", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FromService); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BaseData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetToService() {
		if err = oprot.WriteFieldBegin("to_service", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ToService); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BaseData) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetToMethod() {
		if err = oprot.WriteFieldBegin("to_method", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ToMethod); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *BaseData) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocate() {
		if err = oprot.WriteFieldBegin("locate", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Locate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *BaseData) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *BaseData) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err = oprot.WriteFieldBegin("message", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Message); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *BaseData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseData(%+v)", *p)
}

func (p *BaseData) DeepEqual(ano *BaseData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LogId) {
		return false
	}
	if !p.Field2DeepEqual(ano.FromService) {
		return false
	}
	if !p.Field3DeepEqual(ano.ToService) {
		return false
	}
	if !p.Field4DeepEqual(ano.ToMethod) {
		return false
	}
	if !p.Field5DeepEqual(ano.Locate) {
		return false
	}
	if !p.Field6DeepEqual(ano.Code) {
		return false
	}
	if !p.Field7DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *BaseData) Field1DeepEqual(src string) bool {

	if strings.Compare(p.LogId, src) != 0 {
		return false
	}
	return true
}
func (p *BaseData) Field2DeepEqual(src *string) bool {

	if p.FromService == src {
		return true
	} else if p.FromService == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FromService, *src) != 0 {
		return false
	}
	return true
}
func (p *BaseData) Field3DeepEqual(src *string) bool {

	if p.ToService == src {
		return true
	} else if p.ToService == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ToService, *src) != 0 {
		return false
	}
	return true
}
func (p *BaseData) Field4DeepEqual(src *string) bool {

	if p.ToMethod == src {
		return true
	} else if p.ToMethod == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ToMethod, *src) != 0 {
		return false
	}
	return true
}
func (p *BaseData) Field5DeepEqual(src *string) bool {

	if p.Locate == src {
		return true
	} else if p.Locate == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Locate, *src) != 0 {
		return false
	}
	return true
}
func (p *BaseData) Field6DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *BaseData) Field7DeepEqual(src *string) bool {

	if p.Message == src {
		return true
	} else if p.Message == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Message, *src) != 0 {
		return false
	}
	return true
}
