// Code generated by Kitex v0.5.2. DO NOT EDIT.

package logservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	es_log "github.com/qml-123/es_log/kitex_gen/es_log"
)

func serviceInfo() *kitex.ServiceInfo {
	return logServiceServiceInfo
}

var logServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "LogService"
	handlerType := (*es_log.LogService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Search": kitex.NewMethodInfo(searchHandler, newLogServiceSearchArgs, newLogServiceSearchResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "es_log",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func searchHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*es_log.LogServiceSearchArgs)
	realResult := result.(*es_log.LogServiceSearchResult)
	success, err := handler.(es_log.LogService).Search(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLogServiceSearchArgs() interface{} {
	return es_log.NewLogServiceSearchArgs()
}

func newLogServiceSearchResult() interface{} {
	return es_log.NewLogServiceSearchResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Search(ctx context.Context, req *es_log.SearchRequest) (r *es_log.SearchResponse, err error) {
	var _args es_log.LogServiceSearchArgs
	_args.Req = req
	var _result es_log.LogServiceSearchResult
	if err = p.c.Call(ctx, "Search", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
