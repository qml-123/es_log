// Code generated by thriftgo (0.2.9). DO NOT EDIT.

package es_log

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/qml-123/es_log/kitex_gen/base"
	"strings"
)

type SearchRequest struct {
	AcsSort       *bool          `thrift:"acs_sort,1,optional" frugal:"1,optional,bool" json:"acs_sort,omitempty"`
	Page          *int32         `thrift:"page,2,optional" frugal:"2,optional,i32" json:"page,omitempty"`
	PageSize      *int32         `thrift:"page_size,3,optional" frugal:"3,optional,i32" json:"page_size,omitempty"`
	StartTime     *string        `thrift:"start_time,4,optional" frugal:"4,optional,string" json:"start_time,omitempty"`
	EndTime       *string        `thrift:"end_time,5,optional" frugal:"5,optional,string" json:"end_time,omitempty"`
	LogLevels     []string       `thrift:"log_levels,6,optional" frugal:"6,optional,list<string>" json:"log_levels,omitempty"`
	KeyWords      []string       `thrift:"key_words,7,optional" frugal:"7,optional,list<string>" json:"key_words,omitempty"`
	KeyWordsOr    *bool          `thrift:"key_words_or,8,optional" frugal:"8,optional,bool" json:"key_words_or,omitempty"`
	FilterWords   []string       `thrift:"filter_words,9,optional" frugal:"9,optional,list<string>" json:"filter_words,omitempty"`
	FilterWordsOr *bool          `thrift:"filter_words_or,10,optional" frugal:"10,optional,bool" json:"filter_words_or,omitempty"`
	BaseData      *base.BaseData `thrift:"baseData,255,optional" frugal:"255,optional,base.BaseData" json:"baseData,omitempty"`
}

func NewSearchRequest() *SearchRequest {
	return &SearchRequest{}
}

func (p *SearchRequest) InitDefault() {
	*p = SearchRequest{}
}

var SearchRequest_AcsSort_DEFAULT bool

func (p *SearchRequest) GetAcsSort() (v bool) {
	if !p.IsSetAcsSort() {
		return SearchRequest_AcsSort_DEFAULT
	}
	return *p.AcsSort
}

var SearchRequest_Page_DEFAULT int32 = 1

func (p *SearchRequest) GetPage() (v int32) {
	if !p.IsSetPage() {
		return SearchRequest_Page_DEFAULT
	}
	return *p.Page
}

var SearchRequest_PageSize_DEFAULT int32 = 10

func (p *SearchRequest) GetPageSize() (v int32) {
	if !p.IsSetPageSize() {
		return SearchRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var SearchRequest_StartTime_DEFAULT string

func (p *SearchRequest) GetStartTime() (v string) {
	if !p.IsSetStartTime() {
		return SearchRequest_StartTime_DEFAULT
	}
	return *p.StartTime
}

var SearchRequest_EndTime_DEFAULT string

func (p *SearchRequest) GetEndTime() (v string) {
	if !p.IsSetEndTime() {
		return SearchRequest_EndTime_DEFAULT
	}
	return *p.EndTime
}

var SearchRequest_LogLevels_DEFAULT []string

func (p *SearchRequest) GetLogLevels() (v []string) {
	if !p.IsSetLogLevels() {
		return SearchRequest_LogLevels_DEFAULT
	}
	return p.LogLevels
}

var SearchRequest_KeyWords_DEFAULT []string

func (p *SearchRequest) GetKeyWords() (v []string) {
	if !p.IsSetKeyWords() {
		return SearchRequest_KeyWords_DEFAULT
	}
	return p.KeyWords
}

var SearchRequest_KeyWordsOr_DEFAULT bool

func (p *SearchRequest) GetKeyWordsOr() (v bool) {
	if !p.IsSetKeyWordsOr() {
		return SearchRequest_KeyWordsOr_DEFAULT
	}
	return *p.KeyWordsOr
}

var SearchRequest_FilterWords_DEFAULT []string

func (p *SearchRequest) GetFilterWords() (v []string) {
	if !p.IsSetFilterWords() {
		return SearchRequest_FilterWords_DEFAULT
	}
	return p.FilterWords
}

var SearchRequest_FilterWordsOr_DEFAULT bool

func (p *SearchRequest) GetFilterWordsOr() (v bool) {
	if !p.IsSetFilterWordsOr() {
		return SearchRequest_FilterWordsOr_DEFAULT
	}
	return *p.FilterWordsOr
}

var SearchRequest_BaseData_DEFAULT *base.BaseData

func (p *SearchRequest) GetBaseData() (v *base.BaseData) {
	if !p.IsSetBaseData() {
		return SearchRequest_BaseData_DEFAULT
	}
	return p.BaseData
}
func (p *SearchRequest) SetAcsSort(val *bool) {
	p.AcsSort = val
}
func (p *SearchRequest) SetPage(val *int32) {
	p.Page = val
}
func (p *SearchRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *SearchRequest) SetStartTime(val *string) {
	p.StartTime = val
}
func (p *SearchRequest) SetEndTime(val *string) {
	p.EndTime = val
}
func (p *SearchRequest) SetLogLevels(val []string) {
	p.LogLevels = val
}
func (p *SearchRequest) SetKeyWords(val []string) {
	p.KeyWords = val
}
func (p *SearchRequest) SetKeyWordsOr(val *bool) {
	p.KeyWordsOr = val
}
func (p *SearchRequest) SetFilterWords(val []string) {
	p.FilterWords = val
}
func (p *SearchRequest) SetFilterWordsOr(val *bool) {
	p.FilterWordsOr = val
}
func (p *SearchRequest) SetBaseData(val *base.BaseData) {
	p.BaseData = val
}

var fieldIDToName_SearchRequest = map[int16]string{
	1:   "acs_sort",
	2:   "page",
	3:   "page_size",
	4:   "start_time",
	5:   "end_time",
	6:   "log_levels",
	7:   "key_words",
	8:   "key_words_or",
	9:   "filter_words",
	10:  "filter_words_or",
	255: "baseData",
}

func (p *SearchRequest) IsSetAcsSort() bool {
	return p.AcsSort != nil
}

func (p *SearchRequest) IsSetPage() bool {
	return p.Page != nil
}

func (p *SearchRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *SearchRequest) IsSetStartTime() bool {
	return p.StartTime != nil
}

func (p *SearchRequest) IsSetEndTime() bool {
	return p.EndTime != nil
}

func (p *SearchRequest) IsSetLogLevels() bool {
	return p.LogLevels != nil
}

func (p *SearchRequest) IsSetKeyWords() bool {
	return p.KeyWords != nil
}

func (p *SearchRequest) IsSetKeyWordsOr() bool {
	return p.KeyWordsOr != nil
}

func (p *SearchRequest) IsSetFilterWords() bool {
	return p.FilterWords != nil
}

func (p *SearchRequest) IsSetFilterWordsOr() bool {
	return p.FilterWordsOr != nil
}

func (p *SearchRequest) IsSetBaseData() bool {
	return p.BaseData != nil
}

func (p *SearchRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SearchRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SearchRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.AcsSort = &v
	}
	return nil
}

func (p *SearchRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Page = &v
	}
	return nil
}

func (p *SearchRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageSize = &v
	}
	return nil
}

func (p *SearchRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StartTime = &v
	}
	return nil
}

func (p *SearchRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.EndTime = &v
	}
	return nil
}

func (p *SearchRequest) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.LogLevels = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.LogLevels = append(p.LogLevels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *SearchRequest) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.KeyWords = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.KeyWords = append(p.KeyWords, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *SearchRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.KeyWordsOr = &v
	}
	return nil
}

func (p *SearchRequest) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.FilterWords = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.FilterWords = append(p.FilterWords, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *SearchRequest) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.FilterWordsOr = &v
	}
	return nil
}

func (p *SearchRequest) ReadField255(iprot thrift.TProtocol) error {
	p.BaseData = base.NewBaseData()
	if err := p.BaseData.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SearchRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SearchRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAcsSort() {
		if err = oprot.WriteFieldBegin("acs_sort", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.AcsSort); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SearchRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err = oprot.WriteFieldBegin("page", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Page); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SearchRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SearchRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err = oprot.WriteFieldBegin("start_time", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StartTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *SearchRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndTime() {
		if err = oprot.WriteFieldBegin("end_time", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EndTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *SearchRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogLevels() {
		if err = oprot.WriteFieldBegin("log_levels", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.LogLevels)); err != nil {
			return err
		}
		for _, v := range p.LogLevels {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *SearchRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeyWords() {
		if err = oprot.WriteFieldBegin("key_words", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.KeyWords)); err != nil {
			return err
		}
		for _, v := range p.KeyWords {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *SearchRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeyWordsOr() {
		if err = oprot.WriteFieldBegin("key_words_or", thrift.BOOL, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.KeyWordsOr); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *SearchRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilterWords() {
		if err = oprot.WriteFieldBegin("filter_words", thrift.LIST, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.FilterWords)); err != nil {
			return err
		}
		for _, v := range p.FilterWords {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *SearchRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilterWordsOr() {
		if err = oprot.WriteFieldBegin("filter_words_or", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.FilterWordsOr); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *SearchRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseData() {
		if err = oprot.WriteFieldBegin("baseData", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseData.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SearchRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchRequest(%+v)", *p)
}

func (p *SearchRequest) DeepEqual(ano *SearchRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AcsSort) {
		return false
	}
	if !p.Field2DeepEqual(ano.Page) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field4DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field5DeepEqual(ano.EndTime) {
		return false
	}
	if !p.Field6DeepEqual(ano.LogLevels) {
		return false
	}
	if !p.Field7DeepEqual(ano.KeyWords) {
		return false
	}
	if !p.Field8DeepEqual(ano.KeyWordsOr) {
		return false
	}
	if !p.Field9DeepEqual(ano.FilterWords) {
		return false
	}
	if !p.Field10DeepEqual(ano.FilterWordsOr) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseData) {
		return false
	}
	return true
}

func (p *SearchRequest) Field1DeepEqual(src *bool) bool {

	if p.AcsSort == src {
		return true
	} else if p.AcsSort == nil || src == nil {
		return false
	}
	if *p.AcsSort != *src {
		return false
	}
	return true
}
func (p *SearchRequest) Field2DeepEqual(src *int32) bool {

	if p.Page == src {
		return true
	} else if p.Page == nil || src == nil {
		return false
	}
	if *p.Page != *src {
		return false
	}
	return true
}
func (p *SearchRequest) Field3DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *SearchRequest) Field4DeepEqual(src *string) bool {

	if p.StartTime == src {
		return true
	} else if p.StartTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StartTime, *src) != 0 {
		return false
	}
	return true
}
func (p *SearchRequest) Field5DeepEqual(src *string) bool {

	if p.EndTime == src {
		return true
	} else if p.EndTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EndTime, *src) != 0 {
		return false
	}
	return true
}
func (p *SearchRequest) Field6DeepEqual(src []string) bool {

	if len(p.LogLevels) != len(src) {
		return false
	}
	for i, v := range p.LogLevels {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *SearchRequest) Field7DeepEqual(src []string) bool {

	if len(p.KeyWords) != len(src) {
		return false
	}
	for i, v := range p.KeyWords {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *SearchRequest) Field8DeepEqual(src *bool) bool {

	if p.KeyWordsOr == src {
		return true
	} else if p.KeyWordsOr == nil || src == nil {
		return false
	}
	if *p.KeyWordsOr != *src {
		return false
	}
	return true
}
func (p *SearchRequest) Field9DeepEqual(src []string) bool {

	if len(p.FilterWords) != len(src) {
		return false
	}
	for i, v := range p.FilterWords {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *SearchRequest) Field10DeepEqual(src *bool) bool {

	if p.FilterWordsOr == src {
		return true
	} else if p.FilterWordsOr == nil || src == nil {
		return false
	}
	if *p.FilterWordsOr != *src {
		return false
	}
	return true
}
func (p *SearchRequest) Field255DeepEqual(src *base.BaseData) bool {

	if !p.BaseData.DeepEqual(src) {
		return false
	}
	return true
}

type SearchResponse struct {
	Total    int64               `thrift:"total,1,required" frugal:"1,required,i64" json:"total"`
	Hits     []map[string]string `thrift:"hits,2,required" frugal:"2,required,list<map<string:string>>" json:"hits"`
	BaseData *base.BaseData      `thrift:"baseData,255" frugal:"255,default,base.BaseData" json:"baseData"`
}

func NewSearchResponse() *SearchResponse {
	return &SearchResponse{}
}

func (p *SearchResponse) InitDefault() {
	*p = SearchResponse{}
}

func (p *SearchResponse) GetTotal() (v int64) {
	return p.Total
}

func (p *SearchResponse) GetHits() (v []map[string]string) {
	return p.Hits
}

var SearchResponse_BaseData_DEFAULT *base.BaseData

func (p *SearchResponse) GetBaseData() (v *base.BaseData) {
	if !p.IsSetBaseData() {
		return SearchResponse_BaseData_DEFAULT
	}
	return p.BaseData
}
func (p *SearchResponse) SetTotal(val int64) {
	p.Total = val
}
func (p *SearchResponse) SetHits(val []map[string]string) {
	p.Hits = val
}
func (p *SearchResponse) SetBaseData(val *base.BaseData) {
	p.BaseData = val
}

var fieldIDToName_SearchResponse = map[int16]string{
	1:   "total",
	2:   "hits",
	255: "baseData",
}

func (p *SearchResponse) IsSetBaseData() bool {
	return p.BaseData != nil
}

func (p *SearchResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTotal bool = false
	var issetHits bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetHits = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTotal {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetHits {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SearchResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_SearchResponse[fieldId]))
}

func (p *SearchResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *SearchResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Hits = make([]map[string]string, 0, size)
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_elem := make(map[string]string, size)
		for i := 0; i < size; i++ {
			var _key string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_key = v
			}

			var _val string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_val = v
			}

			_elem[_key] = _val
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		p.Hits = append(p.Hits, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *SearchResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseData = base.NewBaseData()
	if err := p.BaseData.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SearchResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SearchResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SearchResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("hits", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.MAP, len(p.Hits)); err != nil {
		return err
	}
	for _, v := range p.Hits {
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
			return err
		}
		for k, v := range v {

			if err := oprot.WriteString(k); err != nil {
				return err
			}

			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SearchResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseData", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseData.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SearchResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchResponse(%+v)", *p)
}

func (p *SearchResponse) DeepEqual(ano *SearchResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Total) {
		return false
	}
	if !p.Field2DeepEqual(ano.Hits) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseData) {
		return false
	}
	return true
}

func (p *SearchResponse) Field1DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *SearchResponse) Field2DeepEqual(src []map[string]string) bool {

	if len(p.Hits) != len(src) {
		return false
	}
	for i, v := range p.Hits {
		_src := src[i]
		if len(v) != len(_src) {
			return false
		}
		for k, v := range v {
			_src1 := _src[k]
			if strings.Compare(v, _src1) != 0 {
				return false
			}
		}
	}
	return true
}
func (p *SearchResponse) Field255DeepEqual(src *base.BaseData) bool {

	if !p.BaseData.DeepEqual(src) {
		return false
	}
	return true
}

type LogService interface {
	Search(ctx context.Context, req *SearchRequest) (r *SearchResponse, err error)
}

type LogServiceClient struct {
	c thrift.TClient
}

func NewLogServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LogServiceClient {
	return &LogServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewLogServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LogServiceClient {
	return &LogServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewLogServiceClient(c thrift.TClient) *LogServiceClient {
	return &LogServiceClient{
		c: c,
	}
}

func (p *LogServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *LogServiceClient) Search(ctx context.Context, req *SearchRequest) (r *SearchResponse, err error) {
	var _args LogServiceSearchArgs
	_args.Req = req
	var _result LogServiceSearchResult
	if err = p.Client_().Call(ctx, "Search", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type LogServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      LogService
}

func (p *LogServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *LogServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *LogServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewLogServiceProcessor(handler LogService) *LogServiceProcessor {
	self := &LogServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("Search", &logServiceProcessorSearch{handler: handler})
	return self
}
func (p *LogServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type logServiceProcessorSearch struct {
	handler LogService
}

func (p *logServiceProcessorSearch) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LogServiceSearchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Search", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LogServiceSearchResult{}
	var retval *SearchResponse
	if retval, err2 = p.handler.Search(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Search: "+err2.Error())
		oprot.WriteMessageBegin("Search", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Search", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type LogServiceSearchArgs struct {
	Req *SearchRequest `thrift:"req,1" frugal:"1,default,SearchRequest" json:"req"`
}

func NewLogServiceSearchArgs() *LogServiceSearchArgs {
	return &LogServiceSearchArgs{}
}

func (p *LogServiceSearchArgs) InitDefault() {
	*p = LogServiceSearchArgs{}
}

var LogServiceSearchArgs_Req_DEFAULT *SearchRequest

func (p *LogServiceSearchArgs) GetReq() (v *SearchRequest) {
	if !p.IsSetReq() {
		return LogServiceSearchArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LogServiceSearchArgs) SetReq(val *SearchRequest) {
	p.Req = val
}

var fieldIDToName_LogServiceSearchArgs = map[int16]string{
	1: "req",
}

func (p *LogServiceSearchArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LogServiceSearchArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LogServiceSearchArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LogServiceSearchArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewSearchRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LogServiceSearchArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Search_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LogServiceSearchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LogServiceSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogServiceSearchArgs(%+v)", *p)
}

func (p *LogServiceSearchArgs) DeepEqual(ano *LogServiceSearchArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LogServiceSearchArgs) Field1DeepEqual(src *SearchRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LogServiceSearchResult struct {
	Success *SearchResponse `thrift:"success,0,optional" frugal:"0,optional,SearchResponse" json:"success,omitempty"`
}

func NewLogServiceSearchResult() *LogServiceSearchResult {
	return &LogServiceSearchResult{}
}

func (p *LogServiceSearchResult) InitDefault() {
	*p = LogServiceSearchResult{}
}

var LogServiceSearchResult_Success_DEFAULT *SearchResponse

func (p *LogServiceSearchResult) GetSuccess() (v *SearchResponse) {
	if !p.IsSetSuccess() {
		return LogServiceSearchResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LogServiceSearchResult) SetSuccess(x interface{}) {
	p.Success = x.(*SearchResponse)
}

var fieldIDToName_LogServiceSearchResult = map[int16]string{
	0: "success",
}

func (p *LogServiceSearchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LogServiceSearchResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LogServiceSearchResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LogServiceSearchResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewSearchResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LogServiceSearchResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Search_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LogServiceSearchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LogServiceSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogServiceSearchResult(%+v)", *p)
}

func (p *LogServiceSearchResult) DeepEqual(ano *LogServiceSearchResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LogServiceSearchResult) Field0DeepEqual(src *SearchResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
