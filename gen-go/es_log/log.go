// Code generated by Thrift Compiler (0.18.1). DO NOT EDIT.

package es_log

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
	"github.com/qml-123/es_log/gen-go/base"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

var _ = base.GoUnusedProtection__
// Attributes:
//  - AcsSort
//  - Page
//  - PageSize
//  - StartTime
//  - EndTime
//  - LogLevels
//  - KeyWords
//  - BaseData
type SearchRequest struct {
  AcsSort *bool `thrift:"acs_sort,1" db:"acs_sort" json:"acs_sort,omitempty"`
  Page *int32 `thrift:"page,2" db:"page" json:"page,omitempty"`
  PageSize *int32 `thrift:"page_size,3" db:"page_size" json:"page_size,omitempty"`
  StartTime *string `thrift:"start_time,4" db:"start_time" json:"start_time,omitempty"`
  EndTime *string `thrift:"end_time,5" db:"end_time" json:"end_time,omitempty"`
  LogLevels []string `thrift:"log_levels,6" db:"log_levels" json:"log_levels,omitempty"`
  KeyWords []string `thrift:"key_words,7" db:"key_words" json:"key_words,omitempty"`
  // unused fields # 8 to 254
  BaseData *base.BaseData `thrift:"baseData,255,required" db:"baseData" json:"baseData"`
}

func NewSearchRequest() *SearchRequest {
  return &SearchRequest{}
}

var SearchRequest_AcsSort_DEFAULT bool
func (p *SearchRequest) GetAcsSort() bool {
  if !p.IsSetAcsSort() {
    return SearchRequest_AcsSort_DEFAULT
  }
return *p.AcsSort
}
var SearchRequest_Page_DEFAULT int32
func (p *SearchRequest) GetPage() int32 {
  if !p.IsSetPage() {
    return SearchRequest_Page_DEFAULT
  }
return *p.Page
}
var SearchRequest_PageSize_DEFAULT int32
func (p *SearchRequest) GetPageSize() int32 {
  if !p.IsSetPageSize() {
    return SearchRequest_PageSize_DEFAULT
  }
return *p.PageSize
}
var SearchRequest_StartTime_DEFAULT string
func (p *SearchRequest) GetStartTime() string {
  if !p.IsSetStartTime() {
    return SearchRequest_StartTime_DEFAULT
  }
return *p.StartTime
}
var SearchRequest_EndTime_DEFAULT string
func (p *SearchRequest) GetEndTime() string {
  if !p.IsSetEndTime() {
    return SearchRequest_EndTime_DEFAULT
  }
return *p.EndTime
}
var SearchRequest_LogLevels_DEFAULT []string

func (p *SearchRequest) GetLogLevels() []string {
  return p.LogLevels
}
var SearchRequest_KeyWords_DEFAULT []string

func (p *SearchRequest) GetKeyWords() []string {
  return p.KeyWords
}
var SearchRequest_BaseData_DEFAULT *base.BaseData
func (p *SearchRequest) GetBaseData() *base.BaseData {
  if !p.IsSetBaseData() {
    return SearchRequest_BaseData_DEFAULT
  }
return p.BaseData
}
func (p *SearchRequest) IsSetAcsSort() bool {
  return p.AcsSort != nil
}

func (p *SearchRequest) IsSetPage() bool {
  return p.Page != nil
}

func (p *SearchRequest) IsSetPageSize() bool {
  return p.PageSize != nil
}

func (p *SearchRequest) IsSetStartTime() bool {
  return p.StartTime != nil
}

func (p *SearchRequest) IsSetEndTime() bool {
  return p.EndTime != nil
}

func (p *SearchRequest) IsSetLogLevels() bool {
  return p.LogLevels != nil
}

func (p *SearchRequest) IsSetKeyWords() bool {
  return p.KeyWords != nil
}

func (p *SearchRequest) IsSetBaseData() bool {
  return p.BaseData != nil
}

func (p *SearchRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetBaseData bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(ctx, iprot); err != nil {
          return err
        }
        issetBaseData = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetBaseData{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BaseData is not set"));
  }
  return nil
}

func (p *SearchRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AcsSort = &v
}
  return nil
}

func (p *SearchRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Page = &v
}
  return nil
}

func (p *SearchRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PageSize = &v
}
  return nil
}

func (p *SearchRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.StartTime = &v
}
  return nil
}

func (p *SearchRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.EndTime = &v
}
  return nil
}

func (p *SearchRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.LogLevels =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.LogLevels = append(p.LogLevels, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SearchRequest)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.KeyWords =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.KeyWords = append(p.KeyWords, _elem1)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SearchRequest)  ReadField255(ctx context.Context, iprot thrift.TProtocol) error {
  p.BaseData = &base.BaseData{}
  if err := p.BaseData.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseData), err)
  }
  return nil
}

func (p *SearchRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SearchRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField255(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAcsSort() {
    if err := oprot.WriteFieldBegin(ctx, "acs_sort", thrift.BOOL, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:acs_sort: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.AcsSort)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.acs_sort (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:acs_sort: ", p), err) }
  }
  return err
}

func (p *SearchRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPage() {
    if err := oprot.WriteFieldBegin(ctx, "page", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:page: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Page)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.page (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:page: ", p), err) }
  }
  return err
}

func (p *SearchRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPageSize() {
    if err := oprot.WriteFieldBegin(ctx, "page_size", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:page_size: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.PageSize)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.page_size (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:page_size: ", p), err) }
  }
  return err
}

func (p *SearchRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStartTime() {
    if err := oprot.WriteFieldBegin(ctx, "start_time", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:start_time: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.StartTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.start_time (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:start_time: ", p), err) }
  }
  return err
}

func (p *SearchRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEndTime() {
    if err := oprot.WriteFieldBegin(ctx, "end_time", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:end_time: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.EndTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.end_time (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:end_time: ", p), err) }
  }
  return err
}

func (p *SearchRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLogLevels() {
    if err := oprot.WriteFieldBegin(ctx, "log_levels", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:log_levels: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.LogLevels)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.LogLevels {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:log_levels: ", p), err) }
  }
  return err
}

func (p *SearchRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetKeyWords() {
    if err := oprot.WriteFieldBegin(ctx, "key_words", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:key_words: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.KeyWords)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.KeyWords {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:key_words: ", p), err) }
  }
  return err
}

func (p *SearchRequest) writeField255(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "baseData", thrift.STRUCT, 255); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:baseData: ", p), err) }
  if err := p.BaseData.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseData), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 255:baseData: ", p), err) }
  return err
}

func (p *SearchRequest) Equals(other *SearchRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AcsSort != other.AcsSort {
    if p.AcsSort == nil || other.AcsSort == nil {
      return false
    }
    if (*p.AcsSort) != (*other.AcsSort) { return false }
  }
  if p.Page != other.Page {
    if p.Page == nil || other.Page == nil {
      return false
    }
    if (*p.Page) != (*other.Page) { return false }
  }
  if p.PageSize != other.PageSize {
    if p.PageSize == nil || other.PageSize == nil {
      return false
    }
    if (*p.PageSize) != (*other.PageSize) { return false }
  }
  if p.StartTime != other.StartTime {
    if p.StartTime == nil || other.StartTime == nil {
      return false
    }
    if (*p.StartTime) != (*other.StartTime) { return false }
  }
  if p.EndTime != other.EndTime {
    if p.EndTime == nil || other.EndTime == nil {
      return false
    }
    if (*p.EndTime) != (*other.EndTime) { return false }
  }
  if len(p.LogLevels) != len(other.LogLevels) { return false }
  for i, _tgt := range p.LogLevels {
    _src2 := other.LogLevels[i]
    if _tgt != _src2 { return false }
  }
  if len(p.KeyWords) != len(other.KeyWords) { return false }
  for i, _tgt := range p.KeyWords {
    _src3 := other.KeyWords[i]
    if _tgt != _src3 { return false }
  }
  if !p.BaseData.Equals(other.BaseData) { return false }
  return true
}

func (p *SearchRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchRequest(%+v)", *p)
}

func (p *SearchRequest) Validate() error {
  return nil
}
// Attributes:
//  - Total
//  - Hits
//  - BaseData
type SearchResponse struct {
  Total int64 `thrift:"total,1,required" db:"total" json:"total"`
  Hits []map[string]string `thrift:"hits,2,required" db:"hits" json:"hits"`
  // unused fields # 3 to 254
  BaseData *base.BaseData `thrift:"baseData,255" db:"baseData" json:"baseData"`
}

func NewSearchResponse() *SearchResponse {
  return &SearchResponse{}
}


func (p *SearchResponse) GetTotal() int64 {
  return p.Total
}

func (p *SearchResponse) GetHits() []map[string]string {
  return p.Hits
}
var SearchResponse_BaseData_DEFAULT *base.BaseData
func (p *SearchResponse) GetBaseData() *base.BaseData {
  if !p.IsSetBaseData() {
    return SearchResponse_BaseData_DEFAULT
  }
return p.BaseData
}
func (p *SearchResponse) IsSetBaseData() bool {
  return p.BaseData != nil
}

func (p *SearchResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTotal bool = false;
  var issetHits bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetTotal = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetHits = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTotal{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Total is not set"));
  }
  if !issetHits{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Hits is not set"));
  }
  return nil
}

func (p *SearchResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Total = v
}
  return nil
}

func (p *SearchResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]map[string]string, 0, size)
  p.Hits =  tSlice
  for i := 0; i < size; i ++ {
    _, _, size, err := iprot.ReadMapBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]string, size)
    _elem4 :=  tMap
    for i := 0; i < size; i ++ {
var _key5 string
      if v, err := iprot.ReadString(ctx); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _key5 = v
}
var _val6 string
      if v, err := iprot.ReadString(ctx); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _val6 = v
}
      _elem4[_key5] = _val6
    }
    if err := iprot.ReadMapEnd(ctx); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.Hits = append(p.Hits, _elem4)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SearchResponse)  ReadField255(ctx context.Context, iprot thrift.TProtocol) error {
  p.BaseData = &base.BaseData{}
  if err := p.BaseData.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseData), err)
  }
  return nil
}

func (p *SearchResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SearchResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField255(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "total", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:total: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Total)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:total: ", p), err) }
  return err
}

func (p *SearchResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hits", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hits: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.MAP, len(p.Hits)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hits {
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(v)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range v {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hits: ", p), err) }
  return err
}

func (p *SearchResponse) writeField255(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "baseData", thrift.STRUCT, 255); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:baseData: ", p), err) }
  if err := p.BaseData.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseData), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 255:baseData: ", p), err) }
  return err
}

func (p *SearchResponse) Equals(other *SearchResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Total != other.Total { return false }
  if len(p.Hits) != len(other.Hits) { return false }
  for i, _tgt := range p.Hits {
    _src7 := other.Hits[i]
    if len(_tgt) != len(_src7) { return false }
    for k, _tgt := range _tgt {
      _src8 := _src7[k]
      if _tgt != _src8 { return false }
    }
  }
  if !p.BaseData.Equals(other.BaseData) { return false }
  return true
}

func (p *SearchResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchResponse(%+v)", *p)
}

func (p *SearchResponse) Validate() error {
  return nil
}
type LogService interface {
  // Parameters:
  //  - Req
  Search(ctx context.Context, req *SearchRequest) (_r *SearchResponse, _err error)
}

type LogServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewLogServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LogServiceClient {
  return &LogServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewLogServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LogServiceClient {
  return &LogServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewLogServiceClient(c thrift.TClient) *LogServiceClient {
  return &LogServiceClient{
    c: c,
  }
}

func (p *LogServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *LogServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *LogServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Req
func (p *LogServiceClient) Search(ctx context.Context, req *SearchRequest) (_r *SearchResponse, _err error) {
  var _args9 LogServiceSearchArgs
  _args9.Req = req
  var _result11 LogServiceSearchResult
  var _meta10 thrift.ResponseMeta
  _meta10, _err = p.Client_().Call(ctx, "Search", &_args9, &_result11)
  p.SetLastResponseMeta_(_meta10)
  if _err != nil {
    return
  }
  if _ret12 := _result11.GetSuccess(); _ret12 != nil {
    return _ret12, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Search failed: unknown result")
}

type LogServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler LogService
}

func (p *LogServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *LogServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *LogServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewLogServiceProcessor(handler LogService) *LogServiceProcessor {

  self13 := &LogServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self13.processorMap["Search"] = &logServiceProcessorSearch{handler:handler}
return self13
}

func (p *LogServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x14 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x14.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x14

}

type logServiceProcessorSearch struct {
  handler LogService
}

func (p *logServiceProcessorSearch) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err15 error
  args := LogServiceSearchArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "Search", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := LogServiceSearchResult{}
  if retval, err2 := p.handler.Search(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc16 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Search: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "Search", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err15 = thrift.WrapTException(err2)
    }
    if err2 := _exc16.Write(ctx, oprot); _write_err15 == nil && err2 != nil {
      _write_err15 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err15 == nil && err2 != nil {
      _write_err15 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err15 == nil && err2 != nil {
      _write_err15 = thrift.WrapTException(err2)
    }
    if _write_err15 != nil {
      return false, thrift.WrapTException(_write_err15)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "Search", thrift.REPLY, seqId); err2 != nil {
    _write_err15 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err15 == nil && err2 != nil {
    _write_err15 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err15 == nil && err2 != nil {
    _write_err15 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err15 == nil && err2 != nil {
    _write_err15 = thrift.WrapTException(err2)
  }
  if _write_err15 != nil {
    return false, thrift.WrapTException(_write_err15)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type LogServiceSearchArgs struct {
  Req *SearchRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewLogServiceSearchArgs() *LogServiceSearchArgs {
  return &LogServiceSearchArgs{}
}

var LogServiceSearchArgs_Req_DEFAULT *SearchRequest
func (p *LogServiceSearchArgs) GetReq() *SearchRequest {
  if !p.IsSetReq() {
    return LogServiceSearchArgs_Req_DEFAULT
  }
return p.Req
}
func (p *LogServiceSearchArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *LogServiceSearchArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LogServiceSearchArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &SearchRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *LogServiceSearchArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Search_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LogServiceSearchArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *LogServiceSearchArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LogServiceSearchArgs(%+v)", *p)
}

// Attributes:
//  - Success
type LogServiceSearchResult struct {
  Success *SearchResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewLogServiceSearchResult() *LogServiceSearchResult {
  return &LogServiceSearchResult{}
}

var LogServiceSearchResult_Success_DEFAULT *SearchResponse
func (p *LogServiceSearchResult) GetSuccess() *SearchResponse {
  if !p.IsSetSuccess() {
    return LogServiceSearchResult_Success_DEFAULT
  }
return p.Success
}
func (p *LogServiceSearchResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *LogServiceSearchResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LogServiceSearchResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SearchResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *LogServiceSearchResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Search_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LogServiceSearchResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *LogServiceSearchResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LogServiceSearchResult(%+v)", *p)
}


