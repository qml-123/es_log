// Code generated by Thrift Compiler (0.18.1). DO NOT EDIT.

package base

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Attributes:
//  - LogID
//  - FromService
//  - ToService
//  - ToMethod
//  - Locate
//  - Code
//  - Message
type BaseData struct {
  LogID string `thrift:"log_id,1,required" db:"log_id" json:"log_id"`
  FromService *string `thrift:"from_service,2" db:"from_service" json:"from_service,omitempty"`
  ToService *string `thrift:"to_service,3" db:"to_service" json:"to_service,omitempty"`
  ToMethod *string `thrift:"to_method,4" db:"to_method" json:"to_method,omitempty"`
  Locate *string `thrift:"locate,5" db:"locate" json:"locate,omitempty"`
  Code int32 `thrift:"code,6,required" db:"code" json:"code"`
  Message *string `thrift:"message,7" db:"message" json:"message,omitempty"`
}

func NewBaseData() *BaseData {
  return &BaseData{}
}


func (p *BaseData) GetLogID() string {
  return p.LogID
}
var BaseData_FromService_DEFAULT string
func (p *BaseData) GetFromService() string {
  if !p.IsSetFromService() {
    return BaseData_FromService_DEFAULT
  }
return *p.FromService
}
var BaseData_ToService_DEFAULT string
func (p *BaseData) GetToService() string {
  if !p.IsSetToService() {
    return BaseData_ToService_DEFAULT
  }
return *p.ToService
}
var BaseData_ToMethod_DEFAULT string
func (p *BaseData) GetToMethod() string {
  if !p.IsSetToMethod() {
    return BaseData_ToMethod_DEFAULT
  }
return *p.ToMethod
}
var BaseData_Locate_DEFAULT string
func (p *BaseData) GetLocate() string {
  if !p.IsSetLocate() {
    return BaseData_Locate_DEFAULT
  }
return *p.Locate
}

func (p *BaseData) GetCode() int32 {
  return p.Code
}
var BaseData_Message_DEFAULT string
func (p *BaseData) GetMessage() string {
  if !p.IsSetMessage() {
    return BaseData_Message_DEFAULT
  }
return *p.Message
}
func (p *BaseData) IsSetFromService() bool {
  return p.FromService != nil
}

func (p *BaseData) IsSetToService() bool {
  return p.ToService != nil
}

func (p *BaseData) IsSetToMethod() bool {
  return p.ToMethod != nil
}

func (p *BaseData) IsSetLocate() bool {
  return p.Locate != nil
}

func (p *BaseData) IsSetMessage() bool {
  return p.Message != nil
}

func (p *BaseData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetLogID bool = false;
  var issetCode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetLogID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetCode = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetLogID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LogID is not set"));
  }
  if !issetCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Code is not set"));
  }
  return nil
}

func (p *BaseData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.LogID = v
}
  return nil
}

func (p *BaseData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromService = &v
}
  return nil
}

func (p *BaseData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ToService = &v
}
  return nil
}

func (p *BaseData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ToMethod = &v
}
  return nil
}

func (p *BaseData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Locate = &v
}
  return nil
}

func (p *BaseData)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *BaseData)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *BaseData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BaseData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaseData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "log_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:log_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LogID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.log_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:log_id: ", p), err) }
  return err
}

func (p *BaseData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFromService() {
    if err := oprot.WriteFieldBegin(ctx, "from_service", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:from_service: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.FromService)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.from_service (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:from_service: ", p), err) }
  }
  return err
}

func (p *BaseData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetToService() {
    if err := oprot.WriteFieldBegin(ctx, "to_service", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:to_service: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ToService)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.to_service (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:to_service: ", p), err) }
  }
  return err
}

func (p *BaseData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetToMethod() {
    if err := oprot.WriteFieldBegin(ctx, "to_method", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:to_method: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ToMethod)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.to_method (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:to_method: ", p), err) }
  }
  return err
}

func (p *BaseData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLocate() {
    if err := oprot.WriteFieldBegin(ctx, "locate", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:locate: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Locate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.locate (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:locate: ", p), err) }
  }
  return err
}

func (p *BaseData) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:code: ", p), err) }
  return err
}

func (p *BaseData) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:message: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:message: ", p), err) }
  }
  return err
}

func (p *BaseData) Equals(other *BaseData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.LogID != other.LogID { return false }
  if p.FromService != other.FromService {
    if p.FromService == nil || other.FromService == nil {
      return false
    }
    if (*p.FromService) != (*other.FromService) { return false }
  }
  if p.ToService != other.ToService {
    if p.ToService == nil || other.ToService == nil {
      return false
    }
    if (*p.ToService) != (*other.ToService) { return false }
  }
  if p.ToMethod != other.ToMethod {
    if p.ToMethod == nil || other.ToMethod == nil {
      return false
    }
    if (*p.ToMethod) != (*other.ToMethod) { return false }
  }
  if p.Locate != other.Locate {
    if p.Locate == nil || other.Locate == nil {
      return false
    }
    if (*p.Locate) != (*other.Locate) { return false }
  }
  if p.Code != other.Code { return false }
  if p.Message != other.Message {
    if p.Message == nil || other.Message == nil {
      return false
    }
    if (*p.Message) != (*other.Message) { return false }
  }
  return true
}

func (p *BaseData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseData(%+v)", *p)
}

func (p *BaseData) Validate() error {
  return nil
}
